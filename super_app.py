import streamlit as st
import sympy as sp
import numpy as np
import plotly.graph_objs as go
import random

st.set_page_config(layout="wide")
st.title("üìä App Educativa de Funciones Matem√°ticas")

x = sp.symbols('x')
y = sp.symbols('y')

# --------------------------------------------
# Funciones auxiliares (omitidas aqu√≠ por brevedad: parse_function, explicar_derivada, etc.)
# Puedes pegar el resto del c√≥digo desde la √∫ltima versi√≥n sin cambios aqu√≠ abajo
# --------------------------------------------

def main():
    menu = st.sidebar.selectbox("Selecciona una herramienta:", [
        "Gr√°fico de funciones",
        "Evaluar funci√≥n",
        "Derivar funci√≥n",
        "Integrar funci√≥n",
        "Dominio y recorrido",
        "Funci√≥n inversa",
        "Resolver inecuaciones",
        "L√≠mites"
    ])

    if menu == "Gr√°fico de funciones":
        st.header("üìà Gr√°fico interactivo de funciones")
        expr_input = st.text_input("Ingresa la funci√≥n f(x):", value="x**2")
        if expr_input:
            expr = parse_function(expr_input)
            graficar_funcion(expr)

    elif menu == "Evaluar funci√≥n":
        st.header("üß™ Evaluar funci√≥n en un punto")
        expr_input = st.text_input("Funci√≥n f(x):", value="x**2 + 3*x")
        valor_x = st.number_input("Valor de x:", value=2.0)
        if expr_input:
            expr = parse_function(expr_input)
            resultado, pasos = evaluar_funcion(expr, valor_x)
            st.markdown(pasos)

    elif menu == "Derivar funci√≥n":
        st.header("üîÅ Derivar una funci√≥n")
        expr_input = st.text_input("Funci√≥n f(x):", value="x**3 + 2*x")
        if expr_input:
            expr = parse_function(expr_input)
            derivada, pasos = explicar_derivada(expr)
            st.markdown(pasos)

    elif menu == "Integrar funci√≥n":
        st.header("üìê Integrar una funci√≥n")
        expr_input = st.text_input("Funci√≥n f(x):", value="x**2")
        if expr_input:
            expr = parse_function(expr_input)
            integral, pasos = explicar_integral(expr)
            st.markdown(pasos)

    elif menu == "Dominio y recorrido":
        st.header("üß≠ Dominio y recorrido de una funci√≥n")
        expr_input = st.text_input("Funci√≥n f(x):", value="sqrt(x - 2)")
        if expr_input:
            expr = parse_function(expr_input)
            dominio, recorrido = dominio_y_recorrido(expr)
            st.markdown(f"**Dominio:** {dominio}")
            st.markdown(f"**Recorrido:** {recorrido}")
            graficar_funcion(expr)

    elif menu == "Funci√≥n inversa":
        st.header("üîÑ Encontrar funci√≥n inversa")
        expr_input = st.text_input("Funci√≥n f(x):", value="(x - 1)/(x + 2)")
        if expr_input:
            expr = parse_function(expr_input)
            inversa, pasos = calcular_inversa(expr)
            if inversa:
                st.markdown(pasos)
                graficar_funcion(expr, inversa_expr=inversa)
            else:
                st.error(pasos)

    elif menu == "Resolver inecuaciones":
        st.header("‚öñÔ∏è Resolver inecuaciones")
        ineq_input = st.text_input("Inecuaci√≥n (ej: x**2 - 4 > 0):", value="x**2 - 4 > 0")
        if ineq_input:
            resultado, pasos = resolver_inecuacion(ineq_input)
            if resultado:
                st.markdown(pasos)
            else:
                st.error(pasos)

    elif menu == "L√≠mites":
        st.header("‚ûó C√°lculo de L√≠mite")
        st.markdown("Esta secci√≥n te ayuda a **entender el concepto de l√≠mite** y c√≥mo se aplica.")
        st.latex(r"\lim_{x \to a} f(x) = L")
        st.markdown("Esto representa el valor al que se acerca una funci√≥n cuando x se acerca a cierto punto.")

        st.subheader("üìò Demostraci√≥n del l√≠mite como derivada")
        st.markdown("La derivada de una funci√≥n en un punto se define como el l√≠mite de la pendiente de la recta secante cuando h tiende a 0:")
        st.latex(r"f'(a) = \lim_{h \to 0} \frac{f(a+h) - f(a)}{h}")
        st.markdown("Esta f√≥rmula representa la **pendiente de la recta tangente** en el punto $x = a$.")

        st.subheader("üßÆ Calculadora de L√≠mites")
        funcion_limite = st.text_input("Ingresa la funci√≥n f(x):", value="(x**2 - 1)/(x - 1)")
        punto_limite = st.text_input("¬øA qu√© valor tiende x?:", value="1")

        if funcion_limite and punto_limite:
            expr = parse_function(funcion_limite)
            try:
                punto_val = float(punto_limite)
                limite, explicacion = calcular_limite(expr, punto_val)
                if limite is not None:
                    st.success(f"Resultado del l√≠mite: {limite}")
                    st.markdown(explicacion)
                else:
                    st.error(explicacion)
            except ValueError:
                st.error("El punto debe ser un n√∫mero v√°lido.")

if __name__ == "__main__":
    main()
